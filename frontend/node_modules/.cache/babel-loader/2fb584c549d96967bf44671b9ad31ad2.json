{"ast":null,"code":"import { ADD_BIDDING, ADD_ORDER, ADD_PRODUCT, DELETE_PRODUCT, GET_BIDDINGS, GET_ORDERS, GET_PRODUCTS, GET_USERS, UPDATE_ORDER } from \"../actions/FurnitureActions\";\nexport const initialState = {\n  products: [],\n  biddings: [],\n  users: [],\n  orders: []\n};\n\nconst FurnitureReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_PRODUCTS:\n      {\n        return { ...state,\n          products: action.payload\n        };\n      }\n\n    case GET_BIDDINGS:\n      {\n        return { ...state,\n          biddings: action.payload\n        };\n      }\n\n    case GET_USERS:\n      {\n        return { ...state,\n          users: action.payload\n        };\n      }\n\n    case GET_ORDERS:\n      {\n        return { ...state,\n          orders: action.payload\n        };\n      }\n\n    case ADD_PRODUCT:\n      {\n        return { ...state,\n          products: [...state.products, action.payload]\n        };\n      }\n\n    case DELETE_PRODUCT:\n      {\n        return { ...state,\n          products: state.products.filter(product => product.id !== action.payload)\n        };\n      }\n\n    case ADD_BIDDING:\n      {\n        return { ...state,\n          biddings: [...state.biddings, action.payload]\n        };\n      }\n\n    case ADD_ORDER:\n      {\n        return { ...state,\n          orders: [...state.orders, action.payload]\n        };\n      }\n\n    case UPDATE_ORDER:\n      {\n        return { ...state,\n          orders: state.orders.map(order => order.id === action.payload.id ? { ...order,\n            isPaid: action.payload.isPaid\n          } : order)\n        };\n      }\n  }\n};\n\nexport default FurnitureReducer;","map":{"version":3,"sources":["C:/Users/SMASH-PC/Desktop/furniturebidding/frontend/src/app/reducers/reducers/FurnitureReducer.js"],"names":["ADD_BIDDING","ADD_ORDER","ADD_PRODUCT","DELETE_PRODUCT","GET_BIDDINGS","GET_ORDERS","GET_PRODUCTS","GET_USERS","UPDATE_ORDER","initialState","products","biddings","users","orders","FurnitureReducer","state","action","type","payload","filter","product","id","map","order","isPaid"],"mappings":"AAAA,SACEA,WADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,YALF,EAMEC,UANF,EAOEC,YAPF,EAQEC,SARF,EASEC,YATF,QAUO,6BAVP;AAWA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,QAAQ,EAAE,EAFgB;AAG1BC,EAAAA,KAAK,EAAE,EAHmB;AAI1BC,EAAAA,MAAM,EAAE;AAJkB,CAArB;;AAOP,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AAAmB;AACjB,eAAO,EACL,GAAGS,KADE;AAELL,UAAAA,QAAQ,EAAEM,MAAM,CAACE;AAFZ,SAAP;AAID;;AACD,SAAKd,YAAL;AAAmB;AACjB,eAAO,EACL,GAAGW,KADE;AAELJ,UAAAA,QAAQ,EAAEK,MAAM,CAACE;AAFZ,SAAP;AAID;;AACD,SAAKX,SAAL;AAAgB;AACd,eAAO,EACL,GAAGQ,KADE;AAELH,UAAAA,KAAK,EAAEI,MAAM,CAACE;AAFT,SAAP;AAID;;AACD,SAAKb,UAAL;AAAiB;AACf,eAAO,EACL,GAAGU,KADE;AAELF,UAAAA,MAAM,EAAEG,MAAM,CAACE;AAFV,SAAP;AAID;;AACD,SAAKhB,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGa,KADE;AAELL,UAAAA,QAAQ,EAAE,CAAC,GAAGK,KAAK,CAACL,QAAV,EAAoBM,MAAM,CAACE,OAA3B;AAFL,SAAP;AAID;;AACD,SAAKf,cAAL;AAAqB;AACnB,eAAO,EACL,GAAGY,KADE;AAELL,UAAAA,QAAQ,EAAEK,KAAK,CAACL,QAAN,CAAeS,MAAf,CACPC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeL,MAAM,CAACE,OAD3B;AAFL,SAAP;AAMD;;AACD,SAAKlB,WAAL;AAAkB;AAChB,eAAO,EACL,GAAGe,KADE;AAELJ,UAAAA,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAV,EAAoBK,MAAM,CAACE,OAA3B;AAFL,SAAP;AAID;;AACD,SAAKjB,SAAL;AAAgB;AACd,eAAO,EACL,GAAGc,KADE;AAELF,UAAAA,MAAM,EAAE,CAAC,GAAGE,KAAK,CAACF,MAAV,EAAkBG,MAAM,CAACE,OAAzB;AAFH,SAAP;AAID;;AACD,SAAKV,YAAL;AAAmB;AACjB,eAAO,EACL,GAAGO,KADE;AAELF,UAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,CAAaS,GAAb,CAAkBC,KAAD,IACvBA,KAAK,CAACF,EAAN,KAAaL,MAAM,CAACE,OAAP,CAAeG,EAA5B,GACI,EAAE,GAAGE,KAAL;AAAYC,YAAAA,MAAM,EAAER,MAAM,CAACE,OAAP,CAAeM;AAAnC,WADJ,GAEID,KAHE;AAFH,SAAP;AAQD;AA5DH;AA8DD,CA/DD;;AAiEA,eAAeT,gBAAf","sourcesContent":["import {\r\n  ADD_BIDDING,\r\n  ADD_ORDER,\r\n  ADD_PRODUCT,\r\n  DELETE_PRODUCT,\r\n  GET_BIDDINGS,\r\n  GET_ORDERS,\r\n  GET_PRODUCTS,\r\n  GET_USERS,\r\n  UPDATE_ORDER,\r\n} from \"../actions/FurnitureActions\";\r\nexport const initialState = {\r\n  products: [],\r\n  biddings: [],\r\n  users: [],\r\n  orders: [],\r\n};\r\n\r\nconst FurnitureReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_PRODUCTS: {\r\n      return {\r\n        ...state,\r\n        products: action.payload,\r\n      };\r\n    }\r\n    case GET_BIDDINGS: {\r\n      return {\r\n        ...state,\r\n        biddings: action.payload,\r\n      };\r\n    }\r\n    case GET_USERS: {\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n    }\r\n    case GET_ORDERS: {\r\n      return {\r\n        ...state,\r\n        orders: action.payload,\r\n      };\r\n    }\r\n    case ADD_PRODUCT: {\r\n      return {\r\n        ...state,\r\n        products: [...state.products, action.payload],\r\n      };\r\n    }\r\n    case DELETE_PRODUCT: {\r\n      return {\r\n        ...state,\r\n        products: state.products.filter(\r\n          (product) => product.id !== action.payload\r\n        ),\r\n      };\r\n    }\r\n    case ADD_BIDDING: {\r\n      return {\r\n        ...state,\r\n        biddings: [...state.biddings, action.payload],\r\n      };\r\n    }\r\n    case ADD_ORDER: {\r\n      return {\r\n        ...state,\r\n        orders: [...state.orders, action.payload],\r\n      };\r\n    }\r\n    case UPDATE_ORDER: {\r\n      return {\r\n        ...state,\r\n        orders: state.orders.map((order) =>\r\n          order.id === action.payload.id\r\n            ? { ...order, isPaid: action.payload.isPaid }\r\n            : order\r\n        ),\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default FurnitureReducer;\r\n"]},"metadata":{},"sourceType":"module"}