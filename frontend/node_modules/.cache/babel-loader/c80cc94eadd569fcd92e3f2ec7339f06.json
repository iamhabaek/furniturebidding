{"ast":null,"code":"function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n\n    if (reset && resetCount <= 50) {\n      resetCount++;\n\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect((await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  })));\n  const rect = elementContext === 'floating' ? { ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  if (process.env.NODE_ENV !== \"production\") ;\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max); // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\n\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\n\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsSortedByLe;\n\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, (await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)))); // Make `computeCoords` start from the right place.\n\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check.\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides || placementsSortedByLeastOverflow[0].placement;\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n\n    default:\n      return [];\n  }\n}\n\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n\n  return list;\n}\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing.\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2;\n\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = middlewareArguments;\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || [];\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        } // There are 2 or more connected rects.\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value; // eslint-disable-next-line prefer-const\n\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      await apply({ ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"sources":["C:/Users/SMASH-PC/Desktop/furniturebidding/frontend/node_modules/@floating-ui/core/dist/floating-ui.core.esm.js"],"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","process","env","NODE_ENV","console","error","join","name","Error","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","fn","nextX","nextY","data","reset","initialPlacement","elements","warn","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","arrow","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","shouldAddOffset","alignmentOffset","centerOffset","sides","allPlacements","reduce","acc","concat","oppositeSideMap","getOppositePlacement","replace","getAlignmentSides","alignment","mainAlignmentSide","main","cross","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsSortedByLe","detectOverflowOptions","placements","undefined","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByLeastOverflow","slice","sort","a","b","placementThatFitsOnAllSides","find","every","resetPlacement","getExpandedPlacements","oppositePlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","map","flip","_middlewareData$flip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","isBasePlacement","push","overflowsData","_middlewareData$flip2","nextIndex","_overflowsData$map$so","d","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","inline","fallback","clientRects","getClientRects","getBoundingClientRect","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","availableHeight","availableWidth","nextDimensions"],"mappings":"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","sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (process.env.NODE_ENV !== \"production\") {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(middlewareArguments, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  if (process.env.NODE_ENV !== \"production\") ;\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Positions an inner element of the floating element such that it is centered\n * to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Automatically chooses the `placement` which has the most space available.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsSortedByLe;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      const resetPlacement = placementThatFitsOnAllSides || placementsSortedByLeastOverflow[0].placement;\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Changes the placement of the floating element to one that will fit if the\n * initially specified `placement` does not.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(middlewareArguments) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        let resetPlacement = 'bottom';\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$map$so;\n              const placement = (_overflowsData$map$so = overflowsData.map(d => [d, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;\n              if (placement) {\n                resetPlacement = placement;\n              }\n              break;\n            }\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = middlewareArguments;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(middlewareArguments, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = middlewareArguments;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || [];\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(middlewareArguments, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = middlewareArguments;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(middlewareArguments) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Displaces the floating element from its reference element.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y\n      } = middlewareArguments;\n      const diffCoords = await convertValueToCoords(middlewareArguments, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Shifts the floating element in order to keep it in view when it will overflow\n * a clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(middlewareArguments) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data to change the size of the floating element. For instance,\n * prevent it from overflowing its clipping boundary or match the width of the\n * reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(middlewareArguments) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = middlewareArguments;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        availableHeight: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        availableWidth: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      await apply({\n        ...middlewareArguments,\n        ...dimensions\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (rects.floating.width !== nextDimensions.width || rects.floating.height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"]},"metadata":{},"sourceType":"module"}