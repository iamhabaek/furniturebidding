{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SMASH-PC\\\\Desktop\\\\furniturebidding\\\\frontend\\\\src\\\\app\\\\views\\\\account\\\\components\\\\PaymentForm.js\";\nimport React, { useState } from \"react\";\nimport { PaymentElement } from \"@stripe/react-stripe-js\";\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useHistory } from \"react-router-dom\";\nimport { addOrder, updateOrder } from \"app/reducers/actions/FurnitureActions\";\nimport { useAuth } from \"app/appContext\";\n\nconst PaymentForm = ({\n  orderId\n}) => {\n  const {\n    dispatch\n  } = useAuth();\n  const stripe = useStripe();\n  const elements = useElements();\n  const history = useHistory();\n  const [message, setMessage] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsProcessing(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: history.push(\"/accounts/my-bids\")\n      }\n    });\n    addOrder(orderId, {\n      isPaid: true\n    })(dispatch);\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n    }\n\n    setIsProcessing(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    disabled: isProcessing || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, isProcessing ? \"Processing ... \" : \"Pay now\")), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }, message));\n};\n\nexport default PaymentForm;","map":{"version":3,"sources":["C:/Users/SMASH-PC/Desktop/furniturebidding/frontend/src/app/views/account/components/PaymentForm.js"],"names":["React","useState","PaymentElement","useStripe","useElements","useHistory","addOrder","updateOrder","useAuth","PaymentForm","orderId","dispatch","stripe","elements","history","message","setMessage","isProcessing","setIsProcessing","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","push","isPaid","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,yBAAvC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,uCAAtC;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAeH,OAAO,EAA5B;AACA,QAAMI,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMkB,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI,CAACT,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAEDK,IAAAA,eAAe,CAAC,IAAD,CAAf;AAEA,UAAM;AAAEI,MAAAA;AAAF,QAAY,MAAMV,MAAM,CAACW,cAAP,CAAsB;AAC5CV,MAAAA,QAD4C;AAE5CW,MAAAA,aAAa,EAAE;AACb;AACAC,QAAAA,UAAU,EAAEX,OAAO,CAACY,IAAR,CAAa,mBAAb;AAFC;AAF6B,KAAtB,CAAxB;AAOApB,IAAAA,QAAQ,CAACI,OAAD,EAAU;AAAEiB,MAAAA,MAAM,EAAE;AAAV,KAAV,CAAR,CAAoChB,QAApC;;AACA,QAAIW,KAAK,CAACM,IAAN,KAAe,YAAf,IAA+BN,KAAK,CAACM,IAAN,KAAe,kBAAlD,EAAsE;AACpEZ,MAAAA,UAAU,CAACM,KAAK,CAACP,OAAP,CAAV;AACD,KAFD,MAEO;AACLC,MAAAA,UAAU,CAAC,8BAAD,CAAV;AACD;;AAEDE,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GA1BD;;AA2BA,sBACE;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAEC,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,EAAE,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,QAAQ,EAAEF,YAAY,IAAI,CAACL,MAAjB,IAA2B,CAACC,QAFxC;AAGE,IAAA,EAAE,EAAC,QAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAM,IAAA,EAAE,EAAC,aAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,YAAY,GAAG,iBAAH,GAAuB,SADtC,CALF,CAFF,EAYGF,OAAO,iBAAI;AAAK,IAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BA,OAA3B,CAZd,CADF;AAgBD,CAnDD;;AAqDA,eAAeN,WAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PaymentElement } from \"@stripe/react-stripe-js\";\r\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { addOrder, updateOrder } from \"app/reducers/actions/FurnitureActions\";\r\nimport { useAuth } from \"app/appContext\";\r\nconst PaymentForm = ({ orderId }) => {\r\n  const { dispatch } = useAuth();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const history = useHistory();\r\n  const [message, setMessage] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: history.push(\"/accounts/my-bids\"),\r\n      },\r\n    });\r\n    addOrder(orderId, { isPaid: true })(dispatch);\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n    }\r\n\r\n    setIsProcessing(false);\r\n  };\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <PaymentElement id=\"payment-element\" />\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        disabled={isProcessing || !stripe || !elements}\r\n        id=\"submit\"\r\n      >\r\n        <span id=\"button-text\">\r\n          {isProcessing ? \"Processing ... \" : \"Pay now\"}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n"]},"metadata":{},"sourceType":"module"}