{"version":3,"sources":["app/views/account/components/PaymentForm.js","app/views/account/components/Payment.js","app/views/account/components/WonBids.js"],"names":["PaymentForm","orderId","dispatch","useAuth","stripe","useStripe","elements","useElements","history","useHistory","useState","message","setMessage","isProcessing","setIsProcessing","handleSubmit","e","a","preventDefault","updateOrder","isPaid","confirmPayment","confirmParams","return_url","push","error","type","id","onSubmit","className","disabled","Payment","stripePromise","clientSecret","show","setShow","Button","onClick","Modal","onHide","Header","closeButton","Title","Body","options","WonBids","userId","orders","products","filterOrders","filter","order","setStripePromise","setClientSecret","useEffect","fetch","then","r","json","publishableKey","loadStripe","console","log","method","body","JSON","stringify","result","Row","map","Col","lg","md","sm","xs","find","product","productId","src","productImages","style","width","height","productName","amountToPay"],"mappings":"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","file":"static/js/18.fd679c34.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PaymentElement } from \"@stripe/react-stripe-js\";\r\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { addOrder, updateOrder } from \"app/reducers/actions/FurnitureActions\";\r\nimport { useAuth } from \"app/appContext\";\r\nconst PaymentForm = ({ orderId }) => {\r\n  const { dispatch } = useAuth();\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const history = useHistory();\r\n  const [message, setMessage] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsProcessing(true);\r\n    await updateOrder(orderId, { isPaid: true })(dispatch);\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: history.push(\"/home\"),\r\n      },\r\n    });\r\n\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n    }\r\n\r\n    setIsProcessing(false);\r\n  };\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <PaymentElement id=\"payment-element\" />\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        disabled={isProcessing || !stripe || !elements}\r\n        id=\"submit\"\r\n      >\r\n        <span id=\"button-text\">\r\n          {isProcessing ? \"Processing ... \" : \"Pay now\"}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n","import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nimport { Elements } from \"@stripe/react-stripe-js\";\r\n\r\nimport PaymentForm from \"./PaymentForm\";\r\nconst Payment = ({ stripePromise, clientSecret }) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n  return (\r\n    <>\r\n      <Fragment>\r\n        <Button className=\"text-capitalize\" onClick={() => setShow(true)}>\r\n          Pay Now\r\n        </Button>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Payment</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {clientSecret && stripePromise && (\r\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\r\n                <PaymentForm />\r\n              </Elements>\r\n            )}\r\n          </Modal.Body>\r\n        </Modal>\r\n      </Fragment>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Col, Row, Tab, Tabs } from \"react-bootstrap\";\r\nimport { SimpleCard } from \"@gull\";\r\nimport { useAuth } from \"app/appContext\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\n\r\nimport Payment from \"./Payment\";\r\nconst WonBids = ({ userId, orders, products }) => {\r\n  const filterOrders = orders.filter((order) => order.userId === userId);\r\n  const [stripePromise, setStripePromise] = useState(null);\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"http://127.0.0.1:5001/furniturebidding-9a01b/us-central1/app/config\"\r\n    ).then(async (r) => {\r\n      const { publishableKey } = await r.json();\r\n      setStripePromise(loadStripe(publishableKey));\r\n    });\r\n  }, []);\r\n  console.log(stripePromise);\r\n  console.log(clientSecret);\r\n  useEffect(() => {\r\n    fetch(\r\n      \"http://127.0.0.1:5001/furniturebidding-9a01b/us-central1/app/create-payment-intent\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify({}),\r\n      }\r\n    ).then(async (result) => {\r\n      var { clientSecret } = await result.json();\r\n      setClientSecret(clientSecret);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"mt-5\">\r\n      <Row>\r\n        {filterOrders.map((order) => (\r\n          <Col lg={12} md={12} sm={12} xs={12}>\r\n            <SimpleCard>\r\n              <div className=\"d-flex flex-row align-items-center\">\r\n                {products.find((product) => product.id === order.productId) && (\r\n                  <img\r\n                    src={\r\n                      products.find((product) => product.id === order.productId)\r\n                        .productImages[0]\r\n                    }\r\n                    style={{ width: \"100px\", height: \"100px\" }}\r\n                  />\r\n                )}\r\n                <div className=\"d-flex flex-column ml-5\">\r\n                  <h3>\r\n                    {products.find(\r\n                      (product) => product.id === order.productId\r\n                    ) &&\r\n                      products.find((product) => product.id === order.productId)\r\n                        .productName}\r\n                  </h3>\r\n                  <p>Amount to pay: &#8369;{order.amountToPay}</p>\r\n                  {/* <button className=\"btn btn-info\">Pay Now</button>\r\n                   */}\r\n                  {order.isPaid ? (\r\n                    \"Paid\"\r\n                  ) : (\r\n                    <Payment\r\n                      stripePromise={stripePromise}\r\n                      clientSecret={clientSecret}\r\n                      orderId={order.id}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </SimpleCard>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WonBids;\r\n"],"sourceRoot":""}