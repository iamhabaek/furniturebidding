{"version":3,"sources":["app/views/seller/components/CustomSelect.js","app/views/seller/components/AddProduct.js"],"names":["onChange","options","value","className","find","option","defaultValue","basicFormSchema","yup","shape","productName","min","required","description","productImages","of","test","size","category","endDate","startingBid","AddProduct","useAuth","dispatch","user","useState","previewImages","setPreviewImages","map","cat","label","console","log","nanoid","routeSegments","name","path","initialValues","validationSchema","onSubmit","values","setSubmitting","formData","FormData","append","uid","Object","keys","key","setTimeout","addProduct","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","isValidating","noValidate","classList","htmlFor","id","field","Button","variant","as","type","multiple","event","Array","from","target","files","file","URL","createObjectURL","imageUrl","src","alt","style","width","height","marginLeft","onBlur","placeholder","CustomSelect","form","selected","timeFormat","showTimeInput","placeholderText","date","loading","progress","data-style","EXPAND_LEFT"],"mappings":"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","file":"static/js/20.ae55e122.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport default ({ onChange, options, value, className }) => {\r\n  // set default value\r\n  const defaultValue = (options, value) => {\r\n    return options ? options.find((option) => option.value === value) : \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Select\r\n        value={defaultValue(options, value)}\r\n        onChange={(value) => {\r\n          onChange(value);\r\n        }}\r\n        // isMulti\r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Breadcrumb } from \"@gull\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Formik, Field } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { classList } from \"@utils\";\r\nimport { Spinner, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAuth } from \"app/appContext\";\r\nimport CustomSelect from \"./CustomSelect\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { addProduct } from \"app/reducers/actions/FurnitureActions\";\r\nimport LaddaButton, { EXPAND_LEFT } from \"react-ladda/dist/LaddaButton\";\r\nconst basicFormSchema = yup.object().shape({\r\n  productName: yup\r\n    .string()\r\n    .min(10, \"Please add at least 20 characters\")\r\n    .required(\"Product Name is required\"),\r\n  description: yup\r\n    .string()\r\n    .min(20, \"Please add at least 20 characters\")\r\n    .required(\"Description is required\"),\r\n  productImages: yup\r\n    .array()\r\n    .of(\r\n      yup.mixed().test(\"fileSize\", \"File too large\", (value) => {\r\n        return value && value.size <= 5000000; // 1MB\r\n      })\r\n    )\r\n    .required(\"At least one image is required\")\r\n    .min(1, \"Please select at least one image\"),\r\n\r\n  category: yup.string().required(\"Image is required\"),\r\n  endDate: yup.string().required(\"Time End is required\"),\r\n  startingBid: yup.number().required(\"Starting Bid is required\"),\r\n});\r\nconst AddProduct = () => {\r\n  const { dispatch, user } = useAuth();\r\n  const [previewImages, setPreviewImages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const category = [\"Living Room\", \"Bed Room\", \"Kitchen\", \"Bathroom\"];\r\n  const initialState = {\r\n    productName: \"\",\r\n    description: \"\",\r\n    productImages: [],\r\n    category: \"\",\r\n    endDate: \"\",\r\n    startingBid: 0,\r\n  };\r\n  const options = category.map((cat) => {\r\n    return {\r\n      label: cat,\r\n      value: cat,\r\n    };\r\n  });\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    let formData = new FormData();\r\n    formData.append(\"id\", nanoid());\r\n    formData.append(\"productName\", values.productName);\r\n    formData.append(\"description\", values.description);\r\n    formData.append(\"category\", values.category);\r\n    formData.append(\"endDate\", values.endDate);\r\n    formData.append(\"startingBid\", values.startingBid);\r\n    formData.append(\"userId\", user.uid);\r\n    formData.append(\"isDone\", false);\r\n\r\n    for (const key of Object.keys(values.productImages)) {\r\n      formData.append(\"productImages\", values.productImages[key]);\r\n    }\r\n    setTimeout(() => {\r\n      addProduct(formData, user)(dispatch);\r\n      setSubmitting(false);\r\n    }, 2000);\r\n  };\r\n  console.log(nanoid());\r\n  return (\r\n    <div>\r\n      <Breadcrumb\r\n        routeSegments={[\r\n          { name: \"Products\", path: \"/seller\" },\r\n          { name: \"Add Product\" },\r\n        ]}\r\n      ></Breadcrumb>\r\n\r\n      <div className=\"col-lg-12 mb-3\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header bg-transparent\">\r\n            <h3 className=\"card-title\">Please out all fields</h3>\r\n          </div>\r\n          <div>\r\n            <div className=\"card-body\">\r\n              <Formik\r\n                initialValues={initialState}\r\n                validationSchema={basicFormSchema}\r\n                onSubmit={handleSubmit}\r\n              >\r\n                {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n                  setFieldValue,\r\n                  isValidating,\r\n                }) => {\r\n                  return (\r\n                    <form\r\n                      className=\"needs-validation\"\r\n                      onSubmit={handleSubmit}\r\n                      noValidate\r\n                    >\r\n                      <div>\r\n                        <div>\r\n                          <div\r\n                            className={classList({\r\n                              \"form-group col-md-3\": true,\r\n                              \"valid-field\":\r\n                                !errors.productImages && touched.productImages,\r\n                              \"invalid-field\":\r\n                                errors.productImages && touched.productImages,\r\n                            })}\r\n                          >\r\n                            <label htmlFor=\"productImages\">\r\n                              Product Images\r\n                            </label>\r\n                            <div>\r\n                              <Field id=\"productImages\" name=\"productImages\">\r\n                                {({ field }) => (\r\n                                  <div className=\"d-flex justify-content-between flex-row align-items-center\">\r\n                                    {\" \"}\r\n                                    <label htmlFor=\"upload-multiple-file\">\r\n                                      <Button\r\n                                        variant=\"outline-info\"\r\n                                        className=\"py-4\"\r\n                                        as=\"span\"\r\n                                      >\r\n                                        <div className=\"flex flex-middle\">\r\n                                          <i className=\"i-Share-on-Cloud \"> </i>\r\n                                          <span>Add Image</span>\r\n                                        </div>\r\n                                      </Button>\r\n                                    </label>\r\n                                    <input\r\n                                      type=\"file\"\r\n                                      id=\"upload-multiple-file\"\r\n                                      className=\"d-none\"\r\n                                      multiple\r\n                                      onChange={(event) => {\r\n                                        setPreviewImages(\r\n                                          Array.from(event.target.files).map(\r\n                                            (file) => URL.createObjectURL(file)\r\n                                          )\r\n                                        );\r\n                                        setFieldValue(\r\n                                          field.name,\r\n                                          Array.from(event.target.files)\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    <div className=\"d-flex flex-row justify-content-between\">\r\n                                      {previewImages.map((imageUrl) => (\r\n                                        <img\r\n                                          src={imageUrl}\r\n                                          alt=\"Preview\"\r\n                                          key={imageUrl}\r\n                                          style={{\r\n                                            width: \"50px\",\r\n                                            height: \"50px\",\r\n                                            marginLeft: \"5px\",\r\n                                          }}\r\n                                        />\r\n                                      ))}\r\n                                    </div>\r\n                                  </div>\r\n                                )}\r\n                              </Field>\r\n                              {errors.productImages && (\r\n                                <div className=\"invalid-feedback\">\r\n                                  {errors.productImages}\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          <div\r\n                            className={classList({\r\n                              \"form-group col-md-12\": true,\r\n                              \"valid-field\":\r\n                                !errors.productName && touched.productName,\r\n                              \"invalid-field\":\r\n                                errors.productName && touched.productName,\r\n                            })}\r\n                          >\r\n                            <label htmlFor=\"productName\">Product Name</label>\r\n                            <input\r\n                              type=\"text\"\r\n                              className=\"form-control\"\r\n                              name=\"productName\"\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              value={values.productName}\r\n                              placeholder=\"Enter product name\"\r\n                            />\r\n                            {errors.productName && (\r\n                              <div className=\"invalid-feedback\">\r\n                                {errors.productName}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <div\r\n                            className={classList({\r\n                              \"form-group col-md-12\": true,\r\n                              \"valid-field\":\r\n                                !errors.description && touched.description,\r\n                              \"invalid-field\":\r\n                                errors.description && touched.description,\r\n                            })}\r\n                          >\r\n                            <label\r\n                              htmlFor=\"description\"\r\n                              className=\"ul-form__label\"\r\n                            >\r\n                              Product Description\r\n                            </label>\r\n                            <textarea\r\n                              type=\"\"\r\n                              name=\"description\"\r\n                              className=\"form-control\"\r\n                              placeholder=\"Enter description\"\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              value={values.description}\r\n                            />\r\n                            {errors.description && (\r\n                              <div className=\"invalid-feedback\">\r\n                                {errors.description}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <div\r\n                            className={classList({\r\n                              \"form-group col-md-12\": true,\r\n                              \"valid-field\":\r\n                                !errors.category && touched.category,\r\n                              \"invalid-field\":\r\n                                errors.category && touched.category,\r\n                            })}\r\n                          >\r\n                            <label\r\n                              htmlFor=\"category\"\r\n                              className=\"ul-form__label\"\r\n                            >\r\n                              Product category\r\n                            </label>\r\n                            <CustomSelect\r\n                              name=\"category\"\r\n                              options={options}\r\n                              onChange={(value) =>\r\n                                setFieldValue(\"category\", value.value)\r\n                              }\r\n                              value={values.category}\r\n                              required\r\n                            />\r\n                            {errors.category && (\r\n                              <div className=\"invalid-feedback\">\r\n                                {errors.category}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <div\r\n                            className={classList({\r\n                              \"form-group col-md-12\": true,\r\n                              \"valid-field\":\r\n                                !errors.startingBid && touched.startingBid,\r\n                              \"invalid-field\":\r\n                                errors.startingBid && touched.startingBid,\r\n                            })}\r\n                          >\r\n                            <label\r\n                              htmlFor=\"startingBid\"\r\n                              className=\"ul-form__label\"\r\n                            >\r\n                              Starting Bid\r\n                            </label>\r\n                            <input\r\n                              type=\"number\"\r\n                              name=\"startingBid\"\r\n                              className=\"form-control\"\r\n                              placeholder=\"Enter starting bid\"\r\n                              onBlur={handleBlur}\r\n                              onChange={handleChange}\r\n                              value={values.startingBid}\r\n                            />\r\n                            {errors.startingBid && (\r\n                              <div className=\"invalid-feedback\">\r\n                                {errors.startingBid}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          <div\r\n                            className={classList({\r\n                              \"form-group col-md-12\": true,\r\n                              \"valid-field\": !errors.endDate && touched.endDate,\r\n                              \"invalid-field\":\r\n                                errors.endDate && touched.endDate,\r\n                            })}\r\n                          >\r\n                            <label htmlFor=\"endDate\" className=\"ul-form__label\">\r\n                              Bidding End Date\r\n                            </label>\r\n                            <div>\r\n                              <Field name=\"endDate\">\r\n                                {({ field, form }) => (\r\n                                  <DatePicker\r\n                                    className=\"form-control\"\r\n                                    selected={field.value}\r\n                                    timeFormat=\"HH:mm\"\r\n                                    showTimeInput\r\n                                    placeholderText=\"Choose date\"\r\n                                    onChange={(date) =>\r\n                                      form.setFieldValue(field.name, date)\r\n                                    }\r\n                                  />\r\n                                )}\r\n                              </Field>\r\n                            </div>\r\n                            {errors.endDate && (\r\n                              <div className=\"invalid-feedback\">\r\n                                {errors.endDate}\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"card-footer bg-transparent\">\r\n                        <div className=\"mc-footer\">\r\n                          <div className=\"row\">\r\n                            <div className=\"col-lg-12 text-right\">\r\n                              <LaddaButton\r\n                                className=\"btn btn-info\"\r\n                                loading={isSubmitting}\r\n                                progress={0.5}\r\n                                data-style={EXPAND_LEFT}\r\n                                type=\"submit\"\r\n                              >\r\n                                Submit\r\n                              </LaddaButton>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-outline-secondary m-1\"\r\n                              >\r\n                                Cancel\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddProduct;\r\n"],"sourceRoot":""}